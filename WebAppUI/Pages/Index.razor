@page "/"
@using WebApp.Client
@using WebApp.Client.Models.ApiModels
@inject WebAppClientService apiClient
@inject MudBlazor.ISnackbar snackBar

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Departments</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <EditForm OnValidSubmit="AddDepartment" Model="@addDepartmentModel">
            <MudTextField @bind-Value="addDepartmentModel.Name" Label="Name of Department"></MudTextField>
            <br />
            <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="@(()=>AddDepartment())">Add Department</MudButton>
        </EditForm>
    </MudCardContent>
</MudCard>
<MudTable Items="@departments" Filter="@Search">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Departments</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search For Departments"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Department Name</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (isEditMode && context.Id == editingDepartmentId)
        {
            <MudTd>
                <input @bind="context.Name" class="form-control" />
            </MudTd>
        }
        else
        {
            <MudTd DataLabel="Department Name">@context.Name</MudTd>
        }
        <MudTd DataLabel="Actions">
            @if (isEditMode && context.Id == editingDepartmentId)
            {
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(()=>SaveDepartment(context))">Save</MudButton>
                <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="@(()=>CancelEdit())">Cancel</MudButton>
            }
            else
            {
                <MudFab OnClick="@(()=>EditDepartment(context))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"></MudFab>
                <MudFab OnClick="@(()=>DeleteDepartment(context.Id))" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"></MudFab>
            }
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private string searchString = "";
    private List<Department>? departments;
    private Department addDepartmentModel = new();
    private bool isEditMode = false;
    private int editingDepartmentId;

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
    }

    private async Task LoadDepartments()
    {
        departments = await apiClient.GetDepartments();
    }

    private async Task AddDepartment()
    {
        if (string.IsNullOrWhiteSpace(addDepartmentModel.Name))
        {
            snackBar.Add("Department name cannot be empty.", Severity.Error);
            return;
        }
        if (addDepartmentModel.Name.Length > 40)
        {
            snackBar.Add("Department name cannot be longer than 40 characters.", Severity.Error);
            return;
        }

        await apiClient.SaveDepartment(addDepartmentModel);
        await LoadDepartments();
        addDepartmentModel = new();
        snackBar.Add("Department added successfully.", Severity.Success);
    }


    private void EditDepartment(Department department)
    {
        editingDepartmentId = department.Id;
        isEditMode = true;
    }

    private async Task SaveDepartment(Department department)
    {
        if (string.IsNullOrWhiteSpace(department.Name))
        {
            snackBar.Add("Department name cannot be empty.", Severity.Error);
            return;
        }
        if (department.Name.Length > 40)
        {
            snackBar.Add("Department name cannot be longer than 40 characters.", Severity.Error);
            return;
        }

        var existingDepartment = departments?.FirstOrDefault(d => d.Name != null && d.Name.Equals(department.Name, StringComparison.OrdinalIgnoreCase) && d.Id != department.Id);
        if (existingDepartment != null)
        {
            snackBar.Add("A department with this name already exists.", Severity.Error);
            return;
        }
        await apiClient.UpdateDepartment(department);
        await LoadDepartments();
        isEditMode = false;
        editingDepartmentId = 0;
        snackBar.Add("Department updated successfully.", Severity.Success);
    }

    private void CancelEdit()
    {
        isEditMode = false;
        editingDepartmentId = 0;
    }

    private async Task DeleteDepartment(int id)
    {
        await apiClient.DeleteDepartment(id);
        await LoadDepartments();
        snackBar.Add("Department deleted successfully.", Severity.Warning);
    }

    private bool Search(Department department)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        var departmentNameContains = department.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false;

        return departmentNameContains;
    }
}
